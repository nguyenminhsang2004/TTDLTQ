#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChartWeb
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BikesStoresDWH")]
	public partial class BikeStoresDWHDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDim_Brand(Dim_Brand instance);
    partial void UpdateDim_Brand(Dim_Brand instance);
    partial void DeleteDim_Brand(Dim_Brand instance);
    partial void InsertDim_Category(Dim_Category instance);
    partial void UpdateDim_Category(Dim_Category instance);
    partial void DeleteDim_Category(Dim_Category instance);
    partial void InsertDim_Date(Dim_Date instance);
    partial void UpdateDim_Date(Dim_Date instance);
    partial void DeleteDim_Date(Dim_Date instance);
    partial void InsertDim_Staff(Dim_Staff instance);
    partial void UpdateDim_Staff(Dim_Staff instance);
    partial void DeleteDim_Staff(Dim_Staff instance);
    partial void InsertDim_Product(Dim_Product instance);
    partial void UpdateDim_Product(Dim_Product instance);
    partial void DeleteDim_Product(Dim_Product instance);
    partial void InsertDim_Store(Dim_Store instance);
    partial void UpdateDim_Store(Dim_Store instance);
    partial void DeleteDim_Store(Dim_Store instance);
    partial void InsertFact_Revenue_Sale(Fact_Revenue_Sale instance);
    partial void UpdateFact_Revenue_Sale(Fact_Revenue_Sale instance);
    partial void DeleteFact_Revenue_Sale(Fact_Revenue_Sale instance);
    partial void InsertFact_Inventory(Fact_Inventory instance);
    partial void UpdateFact_Inventory(Fact_Inventory instance);
    partial void DeleteFact_Inventory(Fact_Inventory instance);
    #endregion
		
		public BikeStoresDWHDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BikesStoresDWHConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BikeStoresDWHDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BikeStoresDWHDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BikeStoresDWHDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BikeStoresDWHDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Dim_Brand> Dim_Brands
		{
			get
			{
				return this.GetTable<Dim_Brand>();
			}
		}
		
		public System.Data.Linq.Table<Dim_Category> Dim_Categories
		{
			get
			{
				return this.GetTable<Dim_Category>();
			}
		}
		
		public System.Data.Linq.Table<Dim_Date> Dim_Dates
		{
			get
			{
				return this.GetTable<Dim_Date>();
			}
		}
		
		public System.Data.Linq.Table<Dim_Staff> Dim_Staffs
		{
			get
			{
				return this.GetTable<Dim_Staff>();
			}
		}
		
		public System.Data.Linq.Table<Dim_Product> Dim_Products
		{
			get
			{
				return this.GetTable<Dim_Product>();
			}
		}
		
		public System.Data.Linq.Table<Dim_Store> Dim_Stores
		{
			get
			{
				return this.GetTable<Dim_Store>();
			}
		}
		
		public System.Data.Linq.Table<Fact_Revenue_Sale> Fact_Revenue_Sales
		{
			get
			{
				return this.GetTable<Fact_Revenue_Sale>();
			}
		}
		
		public System.Data.Linq.Table<Fact_Inventory> Fact_Inventories
		{
			get
			{
				return this.GetTable<Fact_Inventory>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dim_Brands")]
	public partial class Dim_Brand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _brand_id;
		
		private string _brand_name;
		
		private EntitySet<Fact_Revenue_Sale> _Fact_Revenue_Sales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onbrand_idChanging(int value);
    partial void Onbrand_idChanged();
    partial void Onbrand_nameChanging(string value);
    partial void Onbrand_nameChanged();
    #endregion
		
		public Dim_Brand()
		{
			this._Fact_Revenue_Sales = new EntitySet<Fact_Revenue_Sale>(new Action<Fact_Revenue_Sale>(this.attach_Fact_Revenue_Sales), new Action<Fact_Revenue_Sale>(this.detach_Fact_Revenue_Sales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brand_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int brand_id
		{
			get
			{
				return this._brand_id;
			}
			set
			{
				if ((this._brand_id != value))
				{
					this.Onbrand_idChanging(value);
					this.SendPropertyChanging();
					this._brand_id = value;
					this.SendPropertyChanged("brand_id");
					this.Onbrand_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brand_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string brand_name
		{
			get
			{
				return this._brand_name;
			}
			set
			{
				if ((this._brand_name != value))
				{
					this.Onbrand_nameChanging(value);
					this.SendPropertyChanging();
					this._brand_name = value;
					this.SendPropertyChanged("brand_name");
					this.Onbrand_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Brand_Fact_Revenue_Sale", Storage="_Fact_Revenue_Sales", ThisKey="brand_id", OtherKey="brand_id")]
		public EntitySet<Fact_Revenue_Sale> Fact_Revenue_Sales
		{
			get
			{
				return this._Fact_Revenue_Sales;
			}
			set
			{
				this._Fact_Revenue_Sales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fact_Revenue_Sales(Fact_Revenue_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Brand = this;
		}
		
		private void detach_Fact_Revenue_Sales(Fact_Revenue_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Brand = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dim_Categories")]
	public partial class Dim_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _category_id;
		
		private string _category_name;
		
		private EntitySet<Fact_Revenue_Sale> _Fact_Revenue_Sales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncategory_idChanging(int value);
    partial void Oncategory_idChanged();
    partial void Oncategory_nameChanging(string value);
    partial void Oncategory_nameChanged();
    #endregion
		
		public Dim_Category()
		{
			this._Fact_Revenue_Sales = new EntitySet<Fact_Revenue_Sale>(new Action<Fact_Revenue_Sale>(this.attach_Fact_Revenue_Sales), new Action<Fact_Revenue_Sale>(this.detach_Fact_Revenue_Sales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string category_name
		{
			get
			{
				return this._category_name;
			}
			set
			{
				if ((this._category_name != value))
				{
					this.Oncategory_nameChanging(value);
					this.SendPropertyChanging();
					this._category_name = value;
					this.SendPropertyChanged("category_name");
					this.Oncategory_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Category_Fact_Revenue_Sale", Storage="_Fact_Revenue_Sales", ThisKey="category_id", OtherKey="category_id")]
		public EntitySet<Fact_Revenue_Sale> Fact_Revenue_Sales
		{
			get
			{
				return this._Fact_Revenue_Sales;
			}
			set
			{
				this._Fact_Revenue_Sales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fact_Revenue_Sales(Fact_Revenue_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Category = this;
		}
		
		private void detach_Fact_Revenue_Sales(Fact_Revenue_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dim_Dates")]
	public partial class Dim_Date : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _date;
		
		private System.Nullable<int> _month;
		
		private System.Nullable<int> _quarter;
		
		private System.Nullable<int> _year;
		
		private EntitySet<Fact_Revenue_Sale> _Fact_Revenue_Sales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnmonthChanging(System.Nullable<int> value);
    partial void OnmonthChanged();
    partial void OnquarterChanging(System.Nullable<int> value);
    partial void OnquarterChanged();
    partial void OnyearChanging(System.Nullable<int> value);
    partial void OnyearChanged();
    #endregion
		
		public Dim_Date()
		{
			this._Fact_Revenue_Sales = new EntitySet<Fact_Revenue_Sale>(new Action<Fact_Revenue_Sale>(this.attach_Fact_Revenue_Sales), new Action<Fact_Revenue_Sale>(this.detach_Fact_Revenue_Sales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_month", DbType="Int")]
		public System.Nullable<int> month
		{
			get
			{
				return this._month;
			}
			set
			{
				if ((this._month != value))
				{
					this.OnmonthChanging(value);
					this.SendPropertyChanging();
					this._month = value;
					this.SendPropertyChanged("month");
					this.OnmonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quarter", DbType="Int")]
		public System.Nullable<int> quarter
		{
			get
			{
				return this._quarter;
			}
			set
			{
				if ((this._quarter != value))
				{
					this.OnquarterChanging(value);
					this.SendPropertyChanging();
					this._quarter = value;
					this.SendPropertyChanged("quarter");
					this.OnquarterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="Int")]
		public System.Nullable<int> year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Date_Fact_Revenue_Sale", Storage="_Fact_Revenue_Sales", ThisKey="date", OtherKey="date")]
		public EntitySet<Fact_Revenue_Sale> Fact_Revenue_Sales
		{
			get
			{
				return this._Fact_Revenue_Sales;
			}
			set
			{
				this._Fact_Revenue_Sales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fact_Revenue_Sales(Fact_Revenue_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Date = this;
		}
		
		private void detach_Fact_Revenue_Sales(Fact_Revenue_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Date = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dim_Staffs")]
	public partial class Dim_Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _staff_id;
		
		private string _first_name;
		
		private string _last_name;
		
		private string _email;
		
		private string _phone;
		
		private byte _active;
		
		private int _store_id;
		
		private System.Nullable<int> _manager_id;
		
		private EntitySet<Fact_Revenue_Sale> _Fact_Revenue_Sales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstaff_idChanging(int value);
    partial void Onstaff_idChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnactiveChanging(byte value);
    partial void OnactiveChanged();
    partial void Onstore_idChanging(int value);
    partial void Onstore_idChanged();
    partial void Onmanager_idChanging(System.Nullable<int> value);
    partial void Onmanager_idChanged();
    #endregion
		
		public Dim_Staff()
		{
			this._Fact_Revenue_Sales = new EntitySet<Fact_Revenue_Sale>(new Action<Fact_Revenue_Sale>(this.attach_Fact_Revenue_Sales), new Action<Fact_Revenue_Sale>(this.detach_Fact_Revenue_Sales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staff_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int staff_id
		{
			get
			{
				return this._staff_id;
			}
			set
			{
				if ((this._staff_id != value))
				{
					this.Onstaff_idChanging(value);
					this.SendPropertyChanging();
					this._staff_id = value;
					this.SendPropertyChanged("staff_id");
					this.Onstaff_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NVarChar(25)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="TinyInt NOT NULL")]
		public byte active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_store_id", DbType="Int NOT NULL")]
		public int store_id
		{
			get
			{
				return this._store_id;
			}
			set
			{
				if ((this._store_id != value))
				{
					this.Onstore_idChanging(value);
					this.SendPropertyChanging();
					this._store_id = value;
					this.SendPropertyChanged("store_id");
					this.Onstore_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_manager_id", DbType="Int")]
		public System.Nullable<int> manager_id
		{
			get
			{
				return this._manager_id;
			}
			set
			{
				if ((this._manager_id != value))
				{
					this.Onmanager_idChanging(value);
					this.SendPropertyChanging();
					this._manager_id = value;
					this.SendPropertyChanged("manager_id");
					this.Onmanager_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Staff_Fact_Revenue_Sale", Storage="_Fact_Revenue_Sales", ThisKey="staff_id", OtherKey="staff_id")]
		public EntitySet<Fact_Revenue_Sale> Fact_Revenue_Sales
		{
			get
			{
				return this._Fact_Revenue_Sales;
			}
			set
			{
				this._Fact_Revenue_Sales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fact_Revenue_Sales(Fact_Revenue_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Staff = this;
		}
		
		private void detach_Fact_Revenue_Sales(Fact_Revenue_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dim_Products")]
	public partial class Dim_Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _product_id;
		
		private string _product_name;
		
		private int _brand_id;
		
		private int _category_id;
		
		private short _model_year;
		
		private decimal _list_price;
		
		private EntitySet<Fact_Revenue_Sale> _Fact_Revenue_Sales;
		
		private EntitySet<Fact_Inventory> _Fact_Inventories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onproduct_idChanging(int value);
    partial void Onproduct_idChanged();
    partial void Onproduct_nameChanging(string value);
    partial void Onproduct_nameChanged();
    partial void Onbrand_idChanging(int value);
    partial void Onbrand_idChanged();
    partial void Oncategory_idChanging(int value);
    partial void Oncategory_idChanged();
    partial void Onmodel_yearChanging(short value);
    partial void Onmodel_yearChanged();
    partial void Onlist_priceChanging(decimal value);
    partial void Onlist_priceChanged();
    #endregion
		
		public Dim_Product()
		{
			this._Fact_Revenue_Sales = new EntitySet<Fact_Revenue_Sale>(new Action<Fact_Revenue_Sale>(this.attach_Fact_Revenue_Sales), new Action<Fact_Revenue_Sale>(this.detach_Fact_Revenue_Sales));
			this._Fact_Inventories = new EntitySet<Fact_Inventory>(new Action<Fact_Inventory>(this.attach_Fact_Inventories), new Action<Fact_Inventory>(this.detach_Fact_Inventories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int product_id
		{
			get
			{
				return this._product_id;
			}
			set
			{
				if ((this._product_id != value))
				{
					this.Onproduct_idChanging(value);
					this.SendPropertyChanging();
					this._product_id = value;
					this.SendPropertyChanged("product_id");
					this.Onproduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string product_name
		{
			get
			{
				return this._product_name;
			}
			set
			{
				if ((this._product_name != value))
				{
					this.Onproduct_nameChanging(value);
					this.SendPropertyChanging();
					this._product_name = value;
					this.SendPropertyChanged("product_name");
					this.Onproduct_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brand_id", DbType="Int NOT NULL")]
		public int brand_id
		{
			get
			{
				return this._brand_id;
			}
			set
			{
				if ((this._brand_id != value))
				{
					this.Onbrand_idChanging(value);
					this.SendPropertyChanging();
					this._brand_id = value;
					this.SendPropertyChanged("brand_id");
					this.Onbrand_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", DbType="Int NOT NULL")]
		public int category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_model_year", DbType="SmallInt NOT NULL")]
		public short model_year
		{
			get
			{
				return this._model_year;
			}
			set
			{
				if ((this._model_year != value))
				{
					this.Onmodel_yearChanging(value);
					this.SendPropertyChanging();
					this._model_year = value;
					this.SendPropertyChanged("model_year");
					this.Onmodel_yearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_list_price", DbType="Decimal(10,2) NOT NULL")]
		public decimal list_price
		{
			get
			{
				return this._list_price;
			}
			set
			{
				if ((this._list_price != value))
				{
					this.Onlist_priceChanging(value);
					this.SendPropertyChanging();
					this._list_price = value;
					this.SendPropertyChanged("list_price");
					this.Onlist_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Product_Fact_Revenue_Sale", Storage="_Fact_Revenue_Sales", ThisKey="product_id", OtherKey="product_id")]
		public EntitySet<Fact_Revenue_Sale> Fact_Revenue_Sales
		{
			get
			{
				return this._Fact_Revenue_Sales;
			}
			set
			{
				this._Fact_Revenue_Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Product_Fact_Inventory", Storage="_Fact_Inventories", ThisKey="product_id", OtherKey="product_id")]
		public EntitySet<Fact_Inventory> Fact_Inventories
		{
			get
			{
				return this._Fact_Inventories;
			}
			set
			{
				this._Fact_Inventories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fact_Revenue_Sales(Fact_Revenue_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Product = this;
		}
		
		private void detach_Fact_Revenue_Sales(Fact_Revenue_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Product = null;
		}
		
		private void attach_Fact_Inventories(Fact_Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Product = this;
		}
		
		private void detach_Fact_Inventories(Fact_Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dim_Stores")]
	public partial class Dim_Store : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _store_id;
		
		private string _store_name;
		
		private string _phone;
		
		private string _email;
		
		private string _street;
		
		private string _city;
		
		private string _state;
		
		private string _zip_code;
		
		private EntitySet<Fact_Revenue_Sale> _Fact_Revenue_Sales;
		
		private EntitySet<Fact_Inventory> _Fact_Inventories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstore_idChanging(int value);
    partial void Onstore_idChanged();
    partial void Onstore_nameChanging(string value);
    partial void Onstore_nameChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnstreetChanging(string value);
    partial void OnstreetChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    partial void Onzip_codeChanging(string value);
    partial void Onzip_codeChanged();
    #endregion
		
		public Dim_Store()
		{
			this._Fact_Revenue_Sales = new EntitySet<Fact_Revenue_Sale>(new Action<Fact_Revenue_Sale>(this.attach_Fact_Revenue_Sales), new Action<Fact_Revenue_Sale>(this.detach_Fact_Revenue_Sales));
			this._Fact_Inventories = new EntitySet<Fact_Inventory>(new Action<Fact_Inventory>(this.attach_Fact_Inventories), new Action<Fact_Inventory>(this.detach_Fact_Inventories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_store_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int store_id
		{
			get
			{
				return this._store_id;
			}
			set
			{
				if ((this._store_id != value))
				{
					this.Onstore_idChanging(value);
					this.SendPropertyChanging();
					this._store_id = value;
					this.SendPropertyChanged("store_id");
					this.Onstore_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_store_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string store_name
		{
			get
			{
				return this._store_name;
			}
			set
			{
				if ((this._store_name != value))
				{
					this.Onstore_nameChanging(value);
					this.SendPropertyChanging();
					this._store_name = value;
					this.SendPropertyChanged("store_name");
					this.Onstore_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NVarChar(25)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(100)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_street", DbType="NVarChar(100)")]
		public string street
		{
			get
			{
				return this._street;
			}
			set
			{
				if ((this._street != value))
				{
					this.OnstreetChanging(value);
					this.SendPropertyChanging();
					this._street = value;
					this.SendPropertyChanged("street");
					this.OnstreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="NVarChar(100)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="NVarChar(100)")]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zip_code", DbType="NVarChar(5)")]
		public string zip_code
		{
			get
			{
				return this._zip_code;
			}
			set
			{
				if ((this._zip_code != value))
				{
					this.Onzip_codeChanging(value);
					this.SendPropertyChanging();
					this._zip_code = value;
					this.SendPropertyChanged("zip_code");
					this.Onzip_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Store_Fact_Revenue_Sale", Storage="_Fact_Revenue_Sales", ThisKey="store_id", OtherKey="store_id")]
		public EntitySet<Fact_Revenue_Sale> Fact_Revenue_Sales
		{
			get
			{
				return this._Fact_Revenue_Sales;
			}
			set
			{
				this._Fact_Revenue_Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Store_Fact_Inventory", Storage="_Fact_Inventories", ThisKey="store_id", OtherKey="store_id")]
		public EntitySet<Fact_Inventory> Fact_Inventories
		{
			get
			{
				return this._Fact_Inventories;
			}
			set
			{
				this._Fact_Inventories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fact_Revenue_Sales(Fact_Revenue_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Store = this;
		}
		
		private void detach_Fact_Revenue_Sales(Fact_Revenue_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Store = null;
		}
		
		private void attach_Fact_Inventories(Fact_Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Store = this;
		}
		
		private void detach_Fact_Inventories(Fact_Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Dim_Store = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fact_Revenue_Sales")]
	public partial class Fact_Revenue_Sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _brand_id;
		
		private int _category_id;
		
		private int _product_id;
		
		private int _staff_id;
		
		private int _store_id;
		
		private System.DateTime _date;
		
		private System.Nullable<decimal> _Revenue;
		
		private System.Nullable<int> _Sales;
		
		private EntityRef<Dim_Brand> _Dim_Brand;
		
		private EntityRef<Dim_Category> _Dim_Category;
		
		private EntityRef<Dim_Date> _Dim_Date;
		
		private EntityRef<Dim_Product> _Dim_Product;
		
		private EntityRef<Dim_Staff> _Dim_Staff;
		
		private EntityRef<Dim_Store> _Dim_Store;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onbrand_idChanging(int value);
    partial void Onbrand_idChanged();
    partial void Oncategory_idChanging(int value);
    partial void Oncategory_idChanged();
    partial void Onproduct_idChanging(int value);
    partial void Onproduct_idChanged();
    partial void Onstaff_idChanging(int value);
    partial void Onstaff_idChanged();
    partial void Onstore_idChanging(int value);
    partial void Onstore_idChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnRevenueChanging(System.Nullable<decimal> value);
    partial void OnRevenueChanged();
    partial void OnSalesChanging(System.Nullable<int> value);
    partial void OnSalesChanged();
    #endregion
		
		public Fact_Revenue_Sale()
		{
			this._Dim_Brand = default(EntityRef<Dim_Brand>);
			this._Dim_Category = default(EntityRef<Dim_Category>);
			this._Dim_Date = default(EntityRef<Dim_Date>);
			this._Dim_Product = default(EntityRef<Dim_Product>);
			this._Dim_Staff = default(EntityRef<Dim_Staff>);
			this._Dim_Store = default(EntityRef<Dim_Store>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brand_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int brand_id
		{
			get
			{
				return this._brand_id;
			}
			set
			{
				if ((this._brand_id != value))
				{
					if (this._Dim_Brand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onbrand_idChanging(value);
					this.SendPropertyChanging();
					this._brand_id = value;
					this.SendPropertyChanged("brand_id");
					this.Onbrand_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					if (this._Dim_Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int product_id
		{
			get
			{
				return this._product_id;
			}
			set
			{
				if ((this._product_id != value))
				{
					if (this._Dim_Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproduct_idChanging(value);
					this.SendPropertyChanging();
					this._product_id = value;
					this.SendPropertyChanged("product_id");
					this.Onproduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staff_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int staff_id
		{
			get
			{
				return this._staff_id;
			}
			set
			{
				if ((this._staff_id != value))
				{
					if (this._Dim_Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstaff_idChanging(value);
					this.SendPropertyChanging();
					this._staff_id = value;
					this.SendPropertyChanged("staff_id");
					this.Onstaff_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_store_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int store_id
		{
			get
			{
				return this._store_id;
			}
			set
			{
				if ((this._store_id != value))
				{
					if (this._Dim_Store.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstore_idChanging(value);
					this.SendPropertyChanging();
					this._store_id = value;
					this.SendPropertyChanged("store_id");
					this.Onstore_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					if (this._Dim_Date.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Revenue", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Revenue
		{
			get
			{
				return this._Revenue;
			}
			set
			{
				if ((this._Revenue != value))
				{
					this.OnRevenueChanging(value);
					this.SendPropertyChanging();
					this._Revenue = value;
					this.SendPropertyChanged("Revenue");
					this.OnRevenueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sales", DbType="Int")]
		public System.Nullable<int> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				if ((this._Sales != value))
				{
					this.OnSalesChanging(value);
					this.SendPropertyChanging();
					this._Sales = value;
					this.SendPropertyChanged("Sales");
					this.OnSalesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Brand_Fact_Revenue_Sale", Storage="_Dim_Brand", ThisKey="brand_id", OtherKey="brand_id", IsForeignKey=true)]
		public Dim_Brand Dim_Brand
		{
			get
			{
				return this._Dim_Brand.Entity;
			}
			set
			{
				Dim_Brand previousValue = this._Dim_Brand.Entity;
				if (((previousValue != value) 
							|| (this._Dim_Brand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dim_Brand.Entity = null;
						previousValue.Fact_Revenue_Sales.Remove(this);
					}
					this._Dim_Brand.Entity = value;
					if ((value != null))
					{
						value.Fact_Revenue_Sales.Add(this);
						this._brand_id = value.brand_id;
					}
					else
					{
						this._brand_id = default(int);
					}
					this.SendPropertyChanged("Dim_Brand");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Category_Fact_Revenue_Sale", Storage="_Dim_Category", ThisKey="category_id", OtherKey="category_id", IsForeignKey=true)]
		public Dim_Category Dim_Category
		{
			get
			{
				return this._Dim_Category.Entity;
			}
			set
			{
				Dim_Category previousValue = this._Dim_Category.Entity;
				if (((previousValue != value) 
							|| (this._Dim_Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dim_Category.Entity = null;
						previousValue.Fact_Revenue_Sales.Remove(this);
					}
					this._Dim_Category.Entity = value;
					if ((value != null))
					{
						value.Fact_Revenue_Sales.Add(this);
						this._category_id = value.category_id;
					}
					else
					{
						this._category_id = default(int);
					}
					this.SendPropertyChanged("Dim_Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Date_Fact_Revenue_Sale", Storage="_Dim_Date", ThisKey="date", OtherKey="date", IsForeignKey=true)]
		public Dim_Date Dim_Date
		{
			get
			{
				return this._Dim_Date.Entity;
			}
			set
			{
				Dim_Date previousValue = this._Dim_Date.Entity;
				if (((previousValue != value) 
							|| (this._Dim_Date.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dim_Date.Entity = null;
						previousValue.Fact_Revenue_Sales.Remove(this);
					}
					this._Dim_Date.Entity = value;
					if ((value != null))
					{
						value.Fact_Revenue_Sales.Add(this);
						this._date = value.date;
					}
					else
					{
						this._date = default(System.DateTime);
					}
					this.SendPropertyChanged("Dim_Date");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Product_Fact_Revenue_Sale", Storage="_Dim_Product", ThisKey="product_id", OtherKey="product_id", IsForeignKey=true)]
		public Dim_Product Dim_Product
		{
			get
			{
				return this._Dim_Product.Entity;
			}
			set
			{
				Dim_Product previousValue = this._Dim_Product.Entity;
				if (((previousValue != value) 
							|| (this._Dim_Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dim_Product.Entity = null;
						previousValue.Fact_Revenue_Sales.Remove(this);
					}
					this._Dim_Product.Entity = value;
					if ((value != null))
					{
						value.Fact_Revenue_Sales.Add(this);
						this._product_id = value.product_id;
					}
					else
					{
						this._product_id = default(int);
					}
					this.SendPropertyChanged("Dim_Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Staff_Fact_Revenue_Sale", Storage="_Dim_Staff", ThisKey="staff_id", OtherKey="staff_id", IsForeignKey=true)]
		public Dim_Staff Dim_Staff
		{
			get
			{
				return this._Dim_Staff.Entity;
			}
			set
			{
				Dim_Staff previousValue = this._Dim_Staff.Entity;
				if (((previousValue != value) 
							|| (this._Dim_Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dim_Staff.Entity = null;
						previousValue.Fact_Revenue_Sales.Remove(this);
					}
					this._Dim_Staff.Entity = value;
					if ((value != null))
					{
						value.Fact_Revenue_Sales.Add(this);
						this._staff_id = value.staff_id;
					}
					else
					{
						this._staff_id = default(int);
					}
					this.SendPropertyChanged("Dim_Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Store_Fact_Revenue_Sale", Storage="_Dim_Store", ThisKey="store_id", OtherKey="store_id", IsForeignKey=true)]
		public Dim_Store Dim_Store
		{
			get
			{
				return this._Dim_Store.Entity;
			}
			set
			{
				Dim_Store previousValue = this._Dim_Store.Entity;
				if (((previousValue != value) 
							|| (this._Dim_Store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dim_Store.Entity = null;
						previousValue.Fact_Revenue_Sales.Remove(this);
					}
					this._Dim_Store.Entity = value;
					if ((value != null))
					{
						value.Fact_Revenue_Sales.Add(this);
						this._store_id = value.store_id;
					}
					else
					{
						this._store_id = default(int);
					}
					this.SendPropertyChanged("Dim_Store");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fact_Inventory")]
	public partial class Fact_Inventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _store_id;
		
		private int _product_id;
		
		private System.Nullable<int> _quantity;
		
		private EntityRef<Dim_Product> _Dim_Product;
		
		private EntityRef<Dim_Store> _Dim_Store;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstore_idChanging(int value);
    partial void Onstore_idChanged();
    partial void Onproduct_idChanging(int value);
    partial void Onproduct_idChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    #endregion
		
		public Fact_Inventory()
		{
			this._Dim_Product = default(EntityRef<Dim_Product>);
			this._Dim_Store = default(EntityRef<Dim_Store>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_store_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int store_id
		{
			get
			{
				return this._store_id;
			}
			set
			{
				if ((this._store_id != value))
				{
					if (this._Dim_Store.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstore_idChanging(value);
					this.SendPropertyChanging();
					this._store_id = value;
					this.SendPropertyChanged("store_id");
					this.Onstore_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int product_id
		{
			get
			{
				return this._product_id;
			}
			set
			{
				if ((this._product_id != value))
				{
					if (this._Dim_Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproduct_idChanging(value);
					this.SendPropertyChanging();
					this._product_id = value;
					this.SendPropertyChanged("product_id");
					this.Onproduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Product_Fact_Inventory", Storage="_Dim_Product", ThisKey="product_id", OtherKey="product_id", IsForeignKey=true)]
		public Dim_Product Dim_Product
		{
			get
			{
				return this._Dim_Product.Entity;
			}
			set
			{
				Dim_Product previousValue = this._Dim_Product.Entity;
				if (((previousValue != value) 
							|| (this._Dim_Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dim_Product.Entity = null;
						previousValue.Fact_Inventories.Remove(this);
					}
					this._Dim_Product.Entity = value;
					if ((value != null))
					{
						value.Fact_Inventories.Add(this);
						this._product_id = value.product_id;
					}
					else
					{
						this._product_id = default(int);
					}
					this.SendPropertyChanged("Dim_Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dim_Store_Fact_Inventory", Storage="_Dim_Store", ThisKey="store_id", OtherKey="store_id", IsForeignKey=true)]
		public Dim_Store Dim_Store
		{
			get
			{
				return this._Dim_Store.Entity;
			}
			set
			{
				Dim_Store previousValue = this._Dim_Store.Entity;
				if (((previousValue != value) 
							|| (this._Dim_Store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dim_Store.Entity = null;
						previousValue.Fact_Inventories.Remove(this);
					}
					this._Dim_Store.Entity = value;
					if ((value != null))
					{
						value.Fact_Inventories.Add(this);
						this._store_id = value.store_id;
					}
					else
					{
						this._store_id = default(int);
					}
					this.SendPropertyChanged("Dim_Store");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
